name: Terraform

on:
  workflow_dispatch:
    inputs:
      dry-run:
        description: Disable terraform apply
        required: false
        type: boolean
        default: true

      workspace:
        description: Terraform workspace context to use
        required: true
        type: choice
        options:
          - auth0
          - github
          - newrelic

  workflow_call:
    inputs:
      dry-run:
        description: Disable terraform apply
        required: false
        type: boolean
        default: true

      workspace:
        description: Terraform workspace context to use
        required: true
        type: string

permissions:
  pull-requests: write

jobs:
  terraform:
    name: Terraform
    runs-on: self-hosted
    defaults:
      run:
        working-directory: ${{ inputs.workspace }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Check workspace
        run: |
          [ "${{ inputs.workspace }}" == "auth0" ] && exit 0
          [ "${{ inputs.workspace }}" == "github" ] && exit 0
          [ "${{ inputs.workspace }}" == "newrelic" ] && exit 0
          exit 1

      - name: Setup terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.7

      - name: Terraform fmt
        id: fmt
        continue-on-error: true
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init -backend-config="token=${{ github.token }}"

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        continue-on-error: true
        run: terraform plan -no-color

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
