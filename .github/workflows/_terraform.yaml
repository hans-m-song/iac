name: Terraform

on:
  workflow_dispatch:
    inputs:
      action:
        description: Action to take
        required: true
        type: choice
        options:
          - plan
          - apply

  workflow_call:
    inputs:
      action:
        description: Action to take
        required: true
        type: string

    secrets:
      AWS_DEFAULT_REGION:
        required: true
      AWS_TERRAFORM_ROLE_ARN:
        required: true

env:
  TERRAFORM_VERSION: 1.5.1
  TF_INPUT: 0
  TF_IN_AUTOMATION: 1

jobs:
  terraform:
    runs-on: [self-hosted]

    permissions:
      pull-requests: write
      id-token: write

    defaults:
      run:
        working-directory: terraform

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Configure AWS Credentials
        id: aws
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
          role-to-assume: ${{ secrets.AWS_TERRAFORM_ROLE_ARN }}
          role-session-name: ${{ github.triggering_actor }}@${{ github.repository_owner }}@${{ github.event.repository.name }}@${{ github.job }}@${{ github.run_id }}
          role-skip-session-tagging: true
          role-duration-seconds: 3600

      - name: Get state_bucket_name
        id: state_bucket_name
        uses: axatol/actions/get-ssm-parameter@release
        with:
          path: /infrastructure/terraform/state_bucket_name

      - name: Get auth0_domain
        id: auth0_domain
        uses: axatol/actions/get-ssm-parameter@release
        with:
          path: /infrastructure/auth0/domain
          env-name: TF_VAR_auth0_domain

      - name: Get auth0_client_id
        id: auth0_client_id
        uses: axatol/actions/get-ssm-parameter@release
        with:
          path: /infrastructure/terraform/auth0_client_id
          env-name: TF_VAR_auth0_client_id

      - name: Get auth0_client_secret
        id: auth0_client_secret
        uses: axatol/actions/get-ssm-parameter@release
        with:
          path: /infrastructure/terraform/auth0_client_secret
          env-name: TF_VAR_auth0_client_secret

      - name: Get github_token
        id: github_token
        uses: axatol/actions/get-ssm-parameter@release
        with:
          path: /infrastructure/terraform/github_token
          env-name: TF_VAR_github_token

      - name: Get new_relic_account_id
        id: new_relic_account_id
        uses: axatol/actions/get-ssm-parameter@release
        with:
          path: /infrastructure/new_relic/account_id
          env-name: TF_VAR_new_relic_account_id

      - name: Get new_relic_api_key
        id: new_relic_api_key
        uses: axatol/actions/get-ssm-parameter@release
        with:
          path: /infrastructure/terraform/new_relic_api_key
          env-name: TF_VAR_new_relic_api_key

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Initialise
        id: init
        run: terraform init -backend-config="bucket=${{ steps.state_bucket_name.outputs.value }}"

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        continue-on-error: true
        run: terraform plan -no-color -out=plan.out

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          validate_stdout: ${{ steps.validate.outputs.stdout }}
          plan_stdout: ${{ steps.plan.outputs.stdout }}
          terraform_version: ${{ env.TERRAFORM_VERSION }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `
            #### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${process.env.validate_stdout.trim()}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.plan_stdout.trim()}
            \`\`\`

            </details>

            *${[
              "Pusher: @${{ github.actor }}",
              "Action: `${{ github.event_name }}`",
              "Terraform version: `${{ env.TERRAFORM_VERSION }}`",
            ].join(", ")}*
            `.trim();

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: inputs.action == 'apply'
        run: terraform apply -auto-approve plan.out
